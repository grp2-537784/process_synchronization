// A parent process and a child process, concurrently copies a source file into a destination file using the same opened files inherited by the child process from the //parent process. By using semaphores mutual exclusion is imposed on the two processes that share the space where the copy is made.

void P(int semId, int semNr)

{

    struct sembuf op = {semNr, -1, 0};

    semop(semId, &op, 1);

}

void V(int semId, int semNr)

{

    struct sembuf op = {semNr, 1, 0};

    semop(semId, &op, 1);

}

void copy(int fdSource, int fdDest, int semId)

{

    char c;

    int nr, term = 0;

    while (! term)

    {

        P(semId, 0);    // unique request permission

        if ((nr=read(fdSource, &c, 1)) != 1)

        { perror("Error read"); term = 1; }

        if (!term && (write(fdDest, &c, nr) != nr))

  { perror("write error"); term = 1; }

        V(semId, 0);   

    }

}

int main(int argc, char **argv)

{

    int id, pid, fdSource, fdDest;

    if (argc != 3) {

        printf("Use: %s Source dest\n", argv[0]);

        exit(1);

    }

    id = semget(30000, 1, IPC_CREAT | 0600);

    if (id < 0) {

    { perror("Error creating in semaphore"); exit(2); }

    if (semctl(id, 0, SETVAL, 1) < 0)

    { perror("error in val. sem."); exit(3); }

    if ((fdSource = open(argv[1], O_RDONLY)) < 0)

    { perror("Error opening file"); exit(4); }

    if ((fdDest = creat(argv[2], 0644)) < 0)

    { perror("Error creating file"); exit(5); }

    pid = fork();

    copy(fdSource, fdDest, id);

    if (pid) {

      waitpid(pid, 0);

      semctl(id, 0, IPC_RMID, 0);

    }

}
